{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Game.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport { Card, CardTitle, CardText, Row, Col, Progress } from \"reactstrap\";\nimport \"./../App.css\";\n\nfunction randomize(array) {\n  let i, j, mixed;\n\n  for (i = array.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    mixed = array[i];\n    array[i] = array[j];\n    array[j] = mixed;\n  }\n\n  return array;\n}\n\nfunction Game(props) {\n  let history = useHistory();\n  const [timer, setTimer] = useState(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n  const [timerOn, setTimerOn] = useState(true);\n  useEffect(() => {\n    if (timerOn) {\n      const id = setInterval(() => {\n        setTimer(timer => timer - 1);\n      }, 1000);\n      return () => clearInterval(id);\n    }\n\n    return undefined;\n  }, [timerOn]);\n  const [id, setId] = useState(0);\n  const [idActualPlayer, setIdActualPlayer] = useState(0);\n  const [questionNumberOfActualPlayer, setQuestionNumberOfActualPlayer] = useState(1);\n  const [goodAnswerModalIsOpen, setGoodAnswerModalIsOpen] = useState(false);\n  const [wrongAnswerModalIsOpen, setWrongAnswerModalIsOpen] = useState(false);\n  const [timeOffModal, setTimeOffModal] = useState(false);\n  const [tableAnswer, setTableAnswer] = useState(null);\n  const [displayQuestionNumber, setDisplayQuestionNumber] = useState(idActualPlayer + \"/\" + props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers);\n  const [percentRange, setPercentRange] = useState(props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers);\n  let difficulty = props.gameParameters.difficultyLevel;\n  let numberOfQuestion = props.gameParameters.nbPlayers * props.gameParameters.nbQuestionsPerPlayer;\n  let categoryOfQuestion = props.gameParameters.category; //   let type = props.gameParameters.questionType;\n\n  const handleModalGoodAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n  };\n\n  const handleModalWrongAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n  };\n\n  const handelModalTimerOff = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setTimeOffModal(false);\n  };\n\n  const handleModalGoodAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n\n  const handleModalWrongAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n\n  const handelModalTimerOff2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setId(id + 1);\n    setTimeOffModal(false);\n    history.push(\"/stats\");\n  };\n\n  const handelGoodAnswer = () => {\n    setTimerOn(false);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(true);\n  };\n\n  const handleWrongAnswer = () => {\n    setTimerOn(false);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(true);\n  };\n\n  useEffect(() => {\n    axios.get(`https://opentdb.com/api.php?amount=${numberOfQuestion}&category=${categoryOfQuestion}&difficulty=${difficulty}`).then(res => {\n      props.gameParameters.setQuiz(res.data.results);\n      setTableAnswer(randomize([res.data.results[id].correct_answer, res.data.results[id].incorrect_answers[0], res.data.results[id].incorrect_answers[1], res.data.results[id].incorrect_answers[2]]));\n    });\n  }, []);\n  useEffect(() => {\n    if (props.gameParameters.quiz !== null) {\n      setTableAnswer(props.gameParameters.quiz[id].type !== \"boolean\" ? randomize([props.gameParameters.quiz[id].correct_answer, props.gameParameters.quiz[id].incorrect_answers[0], props.gameParameters.quiz[id].incorrect_answers[1], props.gameParameters.quiz[id].incorrect_answers[2]]) : randomize([props.gameParameters.quiz[id].correct_answer, props.gameParameters.quiz[id].incorrect_answers[0]]));\n    }\n  }, [id]);\n\n  function browseTable() {\n    setIdActualPlayer(idActualPlayer === props.gameParameters.nbPlayers - 1 ? 0 : idActualPlayer + 1);\n    setId(id + 1);\n    setQuestionNumberOfActualPlayer(questionNumberOfActualPlayer + 1);\n    setDisplayQuestionNumber(`${questionNumberOfActualPlayer} / ${props.gameParameters.nbQuestionsPerPlayer}`);\n  }\n\n  return props.gameParameters.quiz !== null && tableAnswer !== null ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: {\n      size: 6,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, timer === 1 && timeOffModal === false ? setTimeOffModal(true) : timer, timer === 1 && timeOffModal === false ? setTimerOn(false) : \"\", timer === -1 && timerOn === true ? setTimerOn(false) : \"\", timer === -1 && timerOn === true ? setTimer(\"\") : \"\", /*#__PURE__*/React.createElement(Modal, {\n    isOpen: goodAnswerModalIsOpen,\n    style: {\n      content: {\n        backgroundColor: \"#BBFD5D\",\n        width: \"30%\",\n        height: \"20%\",\n        textAlign: \"center\",\n        fontSize: \"x-large\",\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, \"Good Answer :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: \"blue\",\n      width: \"90px\",\n      height: \"50px\",\n      borderRadius: \"5px\",\n      fontSize: \"x-large\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handleModalGoodAnswer : handleModalGoodAnswer2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: wrongAnswerModalIsOpen,\n    style: {\n      content: {\n        backgroundColor: \"#FC2622\",\n        width: \"30%\",\n        height: \"20%\",\n        textAlign: \"center\",\n        fontSize: \"x-large\",\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"modal-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }, \"Wrong Answer :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"modal-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }, \"The good answer is :\", \" \", props.gameParameters.quiz[id].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: \"#FFE74C\",\n      width: \"90px\",\n      height: \"50px\",\n      borderRadius: \"5px\",\n      fontSize: \"x-large\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handleModalWrongAnswer : handleModalWrongAnswer2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: timeOffModal,\n    style: {\n      content: {\n        backgroundColor: \"red\",\n        width: \"40%\",\n        height: \"20%\",\n        textAlign: \"center\",\n        fontSize: \"large\",\n        position: \"absolute\",\n        left: \"30%\",\n        top: \"25%\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, \"Time is up :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, \"The good answer is :\", \" \", props.gameParameters.quiz[id].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      width: \"15%\",\n      fontSize: \"xx-large\",\n      color: \"black\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handelModalTimerOff : handelModalTimerOff2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tableOfGamers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 23\n    }\n  }, \"The list of players\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 23\n    }\n  }, \"Answer\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }, props.gameParameters.playerNames.map(name => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 27\n      }\n    }, name));\n  })))), /*#__PURE__*/React.createElement(Progress, {\n    style: {\n      backgroundColor: \"#FFE74C\",\n      width: \"70%\",\n      height: \"50px\",\n      borderRadius: \"5px\"\n    },\n    value: questionNumberOfActualPlayer * 100 / percentRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 14\n    }\n  }, \"Check your progress here\"), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  }, \"Player name:\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }, \"Category : \", props.gameParameters.quiz[id].category), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 15\n    }\n  }, \"Difficulty :\", props.gameParameters.quiz[id].difficulty === \"hard\" ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#FF0921\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 19\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty) : props.gameParameters.quiz[id].difficulty === \"medium\" ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#dc7f9bs\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty) : /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#f6b83c\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 19\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty, \" \")), /*#__PURE__*/React.createElement(CardText, {\n    className: \"question-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }, \"Question :\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: props.gameParameters.quiz[id].question\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 17\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: {\n      size: 6,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"bordureCardReponse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  }, tableAnswer.map((answer, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: `answer buttonAnswer_${i}`,\n      key: i,\n      onClick: answer === props.gameParameters.quiz[id].correct_answer ? handelGoodAnswer : handleWrongAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: answer\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 15\n      }\n    })));\n  }))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }\n  }, \"pas de data\");\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Game.jsx"],"names":["React","useState","useEffect","useHistory","Modal","axios","Card","CardTitle","CardText","Row","Col","Progress","randomize","array","i","j","mixed","length","Math","floor","random","Game","props","history","timer","setTimer","gameParameters","timerParameter","timerOn","setTimerOn","id","setInterval","clearInterval","undefined","setId","idActualPlayer","setIdActualPlayer","questionNumberOfActualPlayer","setQuestionNumberOfActualPlayer","goodAnswerModalIsOpen","setGoodAnswerModalIsOpen","wrongAnswerModalIsOpen","setWrongAnswerModalIsOpen","timeOffModal","setTimeOffModal","tableAnswer","setTableAnswer","displayQuestionNumber","setDisplayQuestionNumber","nbQuestionsPerPlayer","nbPlayers","percentRange","setPercentRange","difficulty","difficultyLevel","numberOfQuestion","categoryOfQuestion","category","handleModalGoodAnswer","browseTable","handleModalWrongAnswer","handelModalTimerOff","handleModalGoodAnswer2","push","handleModalWrongAnswer2","handelModalTimerOff2","handelGoodAnswer","handleWrongAnswer","get","then","res","setQuiz","data","results","correct_answer","incorrect_answers","quiz","type","size","offset","content","backgroundColor","width","height","textAlign","fontSize","position","left","top","transform","playerNames","borderRadius","color","map","name","__html","question","answer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,kCAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,QAA9C,QAA8D,YAA9D;AACA,OAAO,cAAP;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,KAAV;;AACA,OAAKF,CAAC,GAAGD,KAAK,CAACI,MAAN,GAAe,CAAxB,EAA2BH,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACrCC,IAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,CAAC,GAAG,CAArB,CAAX,CAAJ;AACAE,IAAAA,KAAK,GAAGH,KAAK,CAACC,CAAD,CAAb;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWC,KAAX;AACD;;AACD,SAAOH,KAAP;AACD;;AAED,SAASQ,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,OAAO,GAAGpB,UAAU,EAAxB;AAEA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAChCqB,KAAK,CAACI,cAAN,CAAqBC,cAArB,KAAwC,CAAxC,GACI,EADJ,GAEIL,KAAK,CAACI,cAAN,CAAqBC,cAHO,CAAlC;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,OAAJ,EAAa;AACX,YAAME,EAAE,GAAGC,WAAW,CAAC,MAAM;AAC3BN,QAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGA,aAAO,MAAMQ,aAAa,CAACF,EAAD,CAA1B;AACD;;AACD,WAAOG,SAAP;AACD,GARQ,EAQN,CAACL,OAAD,CARM,CAAT;AAUA,QAAM,CAACE,EAAD,EAAKI,KAAL,IAAcjC,QAAQ,CAAC,CAAD,CAA5B;AACA,QAAM,CAACkC,cAAD,EAAiBC,iBAAjB,IAAsCnC,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CACJoC,4BADI,EAEJC,+BAFI,IAGFrC,QAAQ,CAAC,CAAD,CAHZ;AAIA,QAAM,CAACsC,qBAAD,EAAwBC,wBAAxB,IAAoDvC,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACwC,sBAAD,EAAyBC,yBAAzB,IAAsDzC,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAAC0C,YAAD,EAAeC,eAAf,IAAkC3C,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC4C,WAAD,EAAcC,cAAd,IAAgC7C,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC8C,qBAAD,EAAwBC,wBAAxB,IAAoD/C,QAAQ,CAChEkC,cAAc,GACZ,GADF,GAEEb,KAAK,CAACI,cAAN,CAAqBuB,oBAArB,GAA4C3B,KAAK,CAACI,cAAN,CAAqBwB,SAHH,CAAlE;AAKA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCnD,QAAQ,CAACqB,KAAK,CAACI,cAAN,CAAqBuB,oBAArB,GAA4C3B,KAAK,CAACI,cAAN,CAAqBwB,SAAlE,CAAhD;AAEA,MAAIG,UAAU,GAAG/B,KAAK,CAACI,cAAN,CAAqB4B,eAAtC;AACA,MAAIC,gBAAgB,GAClBjC,KAAK,CAACI,cAAN,CAAqBwB,SAArB,GAAiC5B,KAAK,CAACI,cAAN,CAAqBuB,oBADxD;AAEA,MAAIO,kBAAkB,GAAGlC,KAAK,CAACI,cAAN,CAAqB+B,QAA9C,CAxCmB,CAyCrB;;AAGE,QAAMC,qBAAqB,GAAG,MAAM;AAClCC,IAAAA,WAAW;AACX9B,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CACNH,KAAK,CAACI,cAAN,CAAqBC,cAArB,KAAwC,CAAxC,GACI,EADJ,GAEIL,KAAK,CAACI,cAAN,CAAqBC,cAHnB,CAAR;AAKAa,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,GATD;;AAUA,QAAMoB,sBAAsB,GAAG,MAAM;AACnCD,IAAAA,WAAW;AACX9B,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CACNH,KAAK,CAACI,cAAN,CAAqBC,cAArB,KAAwC,CAAxC,GACI,EADJ,GAEIL,KAAK,CAACI,cAAN,CAAqBC,cAHnB,CAAR;AAKAe,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GATD;;AAUA,QAAMmB,mBAAmB,GAAG,MAAM;AAChCF,IAAAA,WAAW;AACX9B,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CAACH,KAAK,CAACI,cAAN,CAAqBC,cAAtB,CAAR;AACAiB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GALD;;AAMA,QAAMkB,sBAAsB,GAAG,MAAM;AACnCjC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CAACH,KAAK,CAACI,cAAN,CAAqBC,cAAtB,CAAR;AACAa,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAjB,IAAAA,OAAO,CAACwC,IAAR,CAAa,QAAb;AACD,GALD;;AAMA,QAAMC,uBAAuB,GAAG,MAAM;AACpCnC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CAACH,KAAK,CAACI,cAAN,CAAqBC,cAAtB,CAAR;AACAe,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAnB,IAAAA,OAAO,CAACwC,IAAR,CAAa,QAAb;AACD,GALD;;AAMA,QAAME,oBAAoB,GAAG,MAAM;AACjCpC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,QAAQ,CAACH,KAAK,CAACI,cAAN,CAAqBC,cAAtB,CAAR;AACAO,IAAAA,KAAK,CAACJ,EAAE,GAAG,CAAN,CAAL;AACAc,IAAAA,eAAe,CAAC,KAAD,CAAf;AACArB,IAAAA,OAAO,CAACwC,IAAR,CAAa,QAAb;AACD,GAND;;AAQA,QAAMG,gBAAgB,GAAG,MAAM;AAC7BrC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,QAAQ,CACNH,KAAK,CAACI,cAAN,CAAqBC,cAArB,KAAwC,CAAxC,GACI,EADJ,GAEIL,KAAK,CAACI,cAAN,CAAqBC,cAHnB,CAAR;AAKAa,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GARD;;AASA,QAAM2B,iBAAiB,GAAG,MAAM;AAC9BtC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,QAAQ,CACNH,KAAK,CAACI,cAAN,CAAqBC,cAArB,KAAwC,CAAxC,GACI,EADJ,GAEIL,KAAK,CAACI,cAAN,CAAqBC,cAHnB,CAAR;AAKAe,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GARD;;AAWAxC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CACF+D,GADH,CAEK,sCAAqCb,gBAAiB,aAAYC,kBAAmB,eAAcH,UAAW,EAFnH,EAIGgB,IAJH,CAISC,GAAD,IAAS;AACbhD,MAAAA,KAAK,CAACI,cAAN,CAAqB6C,OAArB,CAA6BD,GAAG,CAACE,IAAJ,CAASC,OAAtC;AACA3B,MAAAA,cAAc,CACVlC,SAAS,CAAC,CACR0D,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB3C,EAAjB,EAAqB4C,cADb,EAERJ,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB3C,EAAjB,EAAqB6C,iBAArB,CAAuC,CAAvC,CAFQ,EAGRL,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB3C,EAAjB,EAAqB6C,iBAArB,CAAuC,CAAvC,CAHQ,EAIRL,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB3C,EAAjB,EAAqB6C,iBAArB,CAAuC,CAAvC,CAJQ,CAAD,CADC,CAAd;AAQD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBAzE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,KAAK,CAACI,cAAN,CAAqBkD,IAArB,KAA8B,IAAlC,EAAwC;AACtC9B,MAAAA,cAAc,CAACxB,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B+C,IAA9B,KAAuC,SAAvC,GACZjE,SAAS,CAAC,CACTU,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B4C,cADrB,EAETpD,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B6C,iBAA9B,CAAgD,CAAhD,CAFS,EAGTrD,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B6C,iBAA9B,CAAgD,CAAhD,CAHS,EAITrD,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B6C,iBAA9B,CAAgD,CAAhD,CAJS,CAAD,CADG,GAOZ/D,SAAS,CAAC,CACTU,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B4C,cADrB,EAETpD,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B6C,iBAA9B,CAAgD,CAAhD,CAFS,CAAD,CAPE,CAAd;AAYD;AACF,GAfQ,EAeN,CAAC7C,EAAD,CAfM,CAAT;;AAiBA,WAAS6B,WAAT,GAAuB;AACrBvB,IAAAA,iBAAiB,CACfD,cAAc,KAAKb,KAAK,CAACI,cAAN,CAAqBwB,SAArB,GAAiC,CAApD,GACI,CADJ,GAEIf,cAAc,GAAG,CAHN,CAAjB;AAKAD,IAAAA,KAAK,CAACJ,EAAE,GAAG,CAAN,CAAL;AACAQ,IAAAA,+BAA+B,CAACD,4BAA4B,GAAG,CAAhC,CAA/B;AACAW,IAAAA,wBAAwB,CACrB,GAAEX,4BAA6B,MAAKf,KAAK,CAACI,cAAN,CAAqBuB,oBAAqB,EADzD,CAAxB;AAGD;;AAED,SAAO3B,KAAK,CAACI,cAAN,CAAqBkD,IAArB,KAA8B,IAA9B,IAAsC/B,WAAW,KAAK,IAAtD,gBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAE;AAAEiC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvD,KAAK,KAAK,CAAV,IAAemB,YAAY,KAAK,KAAhC,GACGC,eAAe,CAAC,IAAD,CADlB,GAEGpB,KAHN,EAIGA,KAAK,KAAK,CAAV,IAAemB,YAAY,KAAK,KAAhC,GAAwCd,UAAU,CAAC,KAAD,CAAlD,GAA4D,EAJ/D,EAKGL,KAAK,KAAK,CAAC,CAAX,IAAgBI,OAAO,KAAK,IAA5B,GAAmCC,UAAU,CAAC,KAAD,CAA7C,GAAuD,EAL1D,EAMGL,KAAK,KAAK,CAAC,CAAX,IAAgBI,OAAO,KAAK,IAA5B,GAAmCH,QAAQ,CAAC,EAAD,CAA3C,GAAkD,EANrD,eAQE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEc,qBADV;AAEE,IAAA,KAAK,EAAE;AACLyC,MAAAA,OAAO,EAAE;AACPC,QAAAA,eAAe,EAAE,SADV;AAEPC,QAAAA,KAAK,EAAE,KAFA;AAGPC,QAAAA,MAAM,EAAE,KAHD;AAIPC,QAAAA,SAAS,EAAE,QAJJ;AAKPC,QAAAA,QAAQ,EAAE,SALH;AAMPC,QAAAA,QAAQ,EAAE,UANH;AAOPC,QAAAA,IAAI,EAAE,KAPC;AAQPC,QAAAA,GAAG,EAAE,KARE;AASPC,QAAAA,SAAS,EAAE;AATJ;AADJ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgB,GADhB,EAEGnE,KAAK,CAACI,cAAN,CAAqBgE,WAArB,CAAiCvD,cAAjC,CAFH,CAhBF,eAoBE;AACE,IAAA,KAAK,EAAE;AACL8C,MAAAA,eAAe,EAAE,MADZ;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,MAAM,EAAE,MAHH;AAILQ,MAAAA,YAAY,EAAE,KAJT;AAKLN,MAAAA,QAAQ,EAAE;AALL,KADT;AAQE,IAAA,OAAO,EACLvD,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GACIG,qBADJ,GAEII,sBAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGhC,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GAA8B,MAA9B,GAAuC,SAd1C,CApBF,CARF,eA6CE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEd,sBADV;AAEE,IAAA,KAAK,EAAE;AACLuC,MAAAA,OAAO,EAAE;AACPC,QAAAA,eAAe,EAAE,SADV;AAEPC,QAAAA,KAAK,EAAE,KAFA;AAGPC,QAAAA,MAAM,EAAE,KAHD;AAIPC,QAAAA,SAAS,EAAE,QAJJ;AAKPC,QAAAA,QAAQ,EAAE,SALH;AAMPC,QAAAA,QAAQ,EAAE,UANH;AAOPC,QAAAA,IAAI,EAAE,KAPC;AAQPC,QAAAA,GAAG,EAAE,KARE;AASPC,QAAAA,SAAS,EAAE;AATJ;AADJ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAgBE;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiB,GADjB,EAEGnE,KAAK,CAACI,cAAN,CAAqBgE,WAArB,CAAiCvD,cAAjC,CAFH,CAhBF,eAoBE;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACuB,GADvB,EAEGb,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B4C,cAFjC,CApBF,eAwBE;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,eAAe,EAAE,SADZ;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,MAAM,EAAE,MAHH;AAILQ,MAAAA,YAAY,EAAE,KAJT;AAKLN,MAAAA,QAAQ,EAAE;AALL,KADT;AAQE,IAAA,OAAO,EACLvD,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GACIK,sBADJ,GAEII,uBAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGlC,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GAA8B,MAA9B,GAAuC,SAd1C,CAxBF,CA7CF,eAsFE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEZ,YADV;AAEE,IAAA,KAAK,EAAE;AACLqC,MAAAA,OAAO,EAAE;AACPC,QAAAA,eAAe,EAAE,KADV;AAEPC,QAAAA,KAAK,EAAE,KAFA;AAGPC,QAAAA,MAAM,EAAE,KAHD;AAIPC,QAAAA,SAAS,EAAE,QAJJ;AAKPC,QAAAA,QAAQ,EAAE,OALH;AAMPC,QAAAA,QAAQ,EAAE,UANH;AAOPC,QAAAA,IAAI,EAAE,KAPC;AAQPC,QAAAA,GAAG,EAAE;AARE;AADJ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACe,GADf,EAEGlE,KAAK,CAACI,cAAN,CAAqBgE,WAArB,CAAiCvD,cAAjC,CAFH,CAfF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACuB,GADvB,EAEGb,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B4C,cAFjC,CAnBF,eAuBE;AACE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAE,KAAT;AAAgBG,MAAAA,QAAQ,EAAE,UAA1B;AAAsCO,MAAAA,KAAK,EAAE;AAA7C,KADT;AAEE,IAAA,OAAO,EACL9D,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GACIM,mBADJ,GAEII,oBALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGnC,EAAE,GAAG,CAAL,KAAWyB,gBAAX,GAA8B,MAA9B,GAAuC,SAR1C,CAvBF,CAtFF,eAwHE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjC,KAAK,CAACI,cAAN,CAAqBgE,WAArB,CAAiCG,GAAjC,CAAsCC,IAAD,IAAU;AAC9C,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAL,CADF,CADF;AAKD,GANA,CADH,CAPF,CADF,CAxHF,eA2IC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEb,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,KAAK,EAAE,KAArC;AAA4CC,MAAAA,MAAM,EAAE,MAApD;AAA4DQ,MAAAA,YAAY,EAAE;AAA1E,KAAjB;AAAoG,IAAA,KAAK,EAAEtD,4BAA4B,GAAC,GAA7B,GAAiCc,YAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA3ID,eA4IE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACe,GADf,EAEG7B,KAAK,CAACI,cAAN,CAAqBgE,WAArB,CAAiCvD,cAAjC,CAFH,CA5IF,eAgJE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhJF,eAkJE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcb,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B2B,QAD5C,CAlJF,eAqJE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEGnC,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BuB,UAA9B,KAA6C,MAA7C,gBACC;AAAM,IAAA,KAAK,EAAE;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEGtE,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BuB,UAFjC,CADD,GAKG/B,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BuB,UAA9B,KAA6C,QAA7C,gBACF;AAAM,IAAA,KAAK,EAAE;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEGtE,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BuB,UAFjC,CADE,gBAMF;AAAM,IAAA,KAAK,EAAE;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEGtE,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BuB,UAFjC,EAE6C,GAF7C,CAbJ,CArJF,eAyKE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACa,GADb,eAEE;AACN,IAAA,uBAAuB,EAAE;AACvB0C,MAAAA,MAAM,EAAEzE,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8BkE;AADf,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAzKF,CADI,CADA,CADA,CADV,eAyLG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAE;AAAElB,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDlC,WAAW,CAACgD,GAAZ,CAAgB,CAACI,MAAD,EAASnF,CAAT,KAAe;AAC9B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACI,MAAA,SAAS,EAAG,uBAAsBA,CAAE,EADxC;AAGE,MAAA,GAAG,EAAEA,CAHP;AAIE,MAAA,OAAO,EACLmF,MAAM,KAAK3E,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B9C,EAA1B,EAA8B4C,cAAzC,GACIR,gBADJ,GAEIC,iBAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE;AAAG,MAAA,uBAAuB,EAAE;AAAE4B,QAAAA,MAAM,EAAEE;AAAV,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF,CADF;AAgBD,GAjBA,CADC,CADA,CADC,CAzLH,CADG,gBAoNH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBApNJ;AAsND;;AACD,eAAe5E,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport { Card, CardTitle, CardText, Row, Col, Progress } from \"reactstrap\";\nimport \"./../App.css\";\n\nfunction randomize(array) {\n  let i, j, mixed;\n  for (i = array.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    mixed = array[i];\n    array[i] = array[j];\n    array[j] = mixed;\n  }\n  return array;\n}\n\nfunction Game(props) {\n  let history = useHistory();\n\n  const [timer, setTimer] = useState(\n    props.gameParameters.timerParameter === 0\n      ? \"\"\n      : props.gameParameters.timerParameter\n  );\n  const [timerOn, setTimerOn] = useState(true);\n\n  useEffect(() => {\n    if (timerOn) {\n      const id = setInterval(() => {\n        setTimer((timer) => timer - 1);\n      }, 1000);\n      return () => clearInterval(id);\n    }\n    return undefined;\n  }, [timerOn]);\n\n  const [id, setId] = useState(0);\n  const [idActualPlayer, setIdActualPlayer] = useState(0);\n  const [\n    questionNumberOfActualPlayer,\n    setQuestionNumberOfActualPlayer,\n  ] = useState(1);\n  const [goodAnswerModalIsOpen, setGoodAnswerModalIsOpen] = useState(false);\n  const [wrongAnswerModalIsOpen, setWrongAnswerModalIsOpen] = useState(false);\n  const [timeOffModal, setTimeOffModal] = useState(false);\n  const [tableAnswer, setTableAnswer] = useState(null);\n  const [displayQuestionNumber, setDisplayQuestionNumber] = useState(\n    idActualPlayer +\n      \"/\" +\n      props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers\n  );\n  const [percentRange, setPercentRange] = useState(props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers);\n\n  let difficulty = props.gameParameters.difficultyLevel;\n  let numberOfQuestion =\n    props.gameParameters.nbPlayers * props.gameParameters.nbQuestionsPerPlayer;\n  let categoryOfQuestion = props.gameParameters.category;\n//   let type = props.gameParameters.questionType;\n\n\n  const handleModalGoodAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setGoodAnswerModalIsOpen(false);\n  };\n  const handleModalWrongAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setWrongAnswerModalIsOpen(false);\n  };\n  const handelModalTimerOff = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setTimeOffModal(false);\n  };\n  const handleModalGoodAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n  const handleModalWrongAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n  const handelModalTimerOff2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setId(id + 1);\n    setTimeOffModal(false);\n    history.push(\"/stats\");\n  };\n\n  const handelGoodAnswer = () => {\n    setTimerOn(false);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setGoodAnswerModalIsOpen(true)\n  };\n  const handleWrongAnswer = () => {\n    setTimerOn(false);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setWrongAnswerModalIsOpen(true)\n  };\n\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://opentdb.com/api.php?amount=${numberOfQuestion}&category=${categoryOfQuestion}&difficulty=${difficulty}`\n      )\n      .then((res) => {\n        props.gameParameters.setQuiz(res.data.results);\n        setTableAnswer(\n            randomize([\n              res.data.results[id].correct_answer,\n              res.data.results[id].incorrect_answers[0],\n              res.data.results[id].incorrect_answers[1],\n              res.data.results[id].incorrect_answers[2],\n            ])\n          );\n      });\n  }, []);\n\n  useEffect(() => {\n    if (props.gameParameters.quiz !== null) {\n      setTableAnswer(props.gameParameters.quiz[id].type !== \"boolean\" ?\n        (randomize([\n          props.gameParameters.quiz[id].correct_answer,\n          props.gameParameters.quiz[id].incorrect_answers[0],\n          props.gameParameters.quiz[id].incorrect_answers[1],\n          props.gameParameters.quiz[id].incorrect_answers[2],\n        ])) :\n        (randomize([\n          props.gameParameters.quiz[id].correct_answer,\n          props.gameParameters.quiz[id].incorrect_answers[0],\n        ]))\n      );\n    }\n  }, [id]);\n\n  function browseTable() {\n    setIdActualPlayer(\n      idActualPlayer === props.gameParameters.nbPlayers - 1\n        ? 0\n        : idActualPlayer + 1\n    );\n    setId(id + 1);\n    setQuestionNumberOfActualPlayer(questionNumberOfActualPlayer + 1);\n    setDisplayQuestionNumber(\n      `${questionNumberOfActualPlayer} / ${props.gameParameters.nbQuestionsPerPlayer}`\n    );\n  }\n\n  return props.gameParameters.quiz !== null && tableAnswer !== null ? (\n      <div>\n                <Row>\n                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Card className=\"test\">\n            <div className=\"game\">\n              {timer === 1 && timeOffModal === false\n                ? setTimeOffModal(true)\n                : timer}\n              {timer === 1 && timeOffModal === false ? setTimerOn(false) : \"\"}\n              {timer === -1 && timerOn === true ? setTimerOn(false) : \"\"}\n              {timer === -1 && timerOn === true ? setTimer(\"\") : \"\"}\n\n              <Modal\n                isOpen={goodAnswerModalIsOpen}\n                style={{\n                  content: {\n                    backgroundColor: \"#BBFD5D\",\n                    width: \"30%\",\n                    height: \"20%\",\n                    textAlign: \"center\",\n                    fontSize: \"x-large\",\n                    position: \"absolute\",\n                    left: \"50%\",\n                    top: \"50%\",\n                    transform: \"translate(-50%, -50%)\",\n                  },\n                }}\n              >\n                <h2>\n                  Good Answer :{\" \"}\n                  {props.gameParameters.playerNames[idActualPlayer]}\n                </h2>\n                <button\n                  style={{\n                    backgroundColor: \"blue\",\n                    width: \"90px\",\n                    height: \"50px\",\n                    borderRadius: \"5px\",\n                    fontSize: \"x-large\",\n                  }}\n                  onClick={\n                    id + 1 !== numberOfQuestion\n                      ? handleModalGoodAnswer\n                      : handleModalGoodAnswer2\n                  }\n                >\n                  {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                </button>\n              </Modal>\n              <Modal\n                isOpen={wrongAnswerModalIsOpen}\n                style={{\n                  content: {\n                    backgroundColor: \"#FC2622\",\n                    width: \"30%\",\n                    height: \"20%\",\n                    textAlign: \"center\",\n                    fontSize: \"x-large\",\n                    position: \"absolute\",\n                    left: \"50%\",\n                    top: \"50%\",\n                    transform: \"translate(-50%, -50%)\",\n                  },\n                }}\n              >\n                <h2 className=\"modal-answer\">\n                  Wrong Answer :{\" \"}\n                  {props.gameParameters.playerNames[idActualPlayer]}\n                </h2>\n                <p className=\"modal-answer\">\n                  The good answer is :{\" \"}\n                  {props.gameParameters.quiz[id].correct_answer}\n                </p>\n                <button\n                  style={{\n                    backgroundColor: \"#FFE74C\",\n                    width: \"90px\",\n                    height: \"50px\",\n                    borderRadius: \"5px\",\n                    fontSize: \"x-large\",\n                  }}\n                  onClick={\n                    id + 1 !== numberOfQuestion\n                      ? handleModalWrongAnswer\n                      : handleModalWrongAnswer2\n                  }\n                >\n                  {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                </button>\n              </Modal>\n              <Modal\n                isOpen={timeOffModal}\n                style={{\n                  content: {\n                    backgroundColor: \"red\",\n                    width: \"40%\",\n                    height: \"20%\",\n                    textAlign: \"center\",\n                    fontSize: \"large\",\n                    position: \"absolute\",\n                    left: \"30%\",\n                    top: \"25%\",\n                  },\n                }}\n              >\n                <h2>\n                  Time is up :{\" \"}\n                  {props.gameParameters.playerNames[idActualPlayer]}\n                </h2>\n                <p>\n                  The good answer is :{\" \"}\n                  {props.gameParameters.quiz[id].correct_answer}\n                </p>\n                <button\n                  style={{ width: \"15%\", fontSize: \"xx-large\", color: \"black\" }}\n                  onClick={\n                    id + 1 !== numberOfQuestion\n                      ? handelModalTimerOff\n                      : handelModalTimerOff2\n                  }\n                >\n                  {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                </button>\n              </Modal>\n              <div className=\"tableOfGamers\">\n                <table className=\"board\">\n                  <thead>\n                    <tr>\n                      <th>The list of players</th>\n                      <th>Answer</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {props.gameParameters.playerNames.map((name) => {\n                      return (\n                        <tr>\n                          <td>{name}</td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n             <Progress style={{ backgroundColor: \"#FFE74C\", width: \"70%\", height: \"50px\", borderRadius: \"5px\",}} value={questionNumberOfActualPlayer*100/percentRange}>Check your progress here</Progress>\n              <CardText className=\"\">\n                Player name:{\" \"}\n                {props.gameParameters.playerNames[idActualPlayer]}\n              </CardText>\n              <CardText className=\"\">\n              </CardText>\n              <CardText className=\"\">\n                Category : {props.gameParameters.quiz[id].category}\n              </CardText>\n              <CardText className=\"\">\n                Difficulty :\n                {props.gameParameters.quiz[id].difficulty === \"hard\" ? (\n                  <span style={{ color: \"#FF0921\" }}>\n                    {\" \"}\n                    {props.gameParameters.quiz[id].difficulty}\n                  </span>\n                ) : props.gameParameters.quiz[id].difficulty === \"medium\" ? (\n                  <span style={{ color: \"#dc7f9bs\" }}>\n                    {\" \"}\n                    {props.gameParameters.quiz[id].difficulty}\n                  </span>\n                ) : (\n                  <span style={{ color: \"#f6b83c\" }}>\n                    {\" \"}\n                    {props.gameParameters.quiz[id].difficulty}{\" \"}\n                  </span>\n                )}\n              </CardText>\n\n              <CardText className=\"question-style\"> \n                Question :{\" \"}\n                <span\n          dangerouslySetInnerHTML={{\n            __html: props.gameParameters.quiz[id].question,\n          }}\n        ></span>\n        </CardText>\n        </div>\n        </Card>\n        </Col>\n        </Row>\n         <Row>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n        <Card className=\"bordureCardReponse\">\n      {tableAnswer.map((answer, i) => {\n        return (\n          <div>\n            <button\n                className={`answer buttonAnswer_${i}`} \n                \n              key={i}\n              onClick={\n                answer === props.gameParameters.quiz[id].correct_answer\n                  ? handelGoodAnswer\n                  : handleWrongAnswer\n              }\n            >\n              <p dangerouslySetInnerHTML={{ __html: answer }}></p>\n            </button>\n          </div>\n        );\n      })}\n        </Card>\n    </Col>\n</Row>\n    </div>\n  ) : (\n      <p>pas de data</p>\n    );\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}
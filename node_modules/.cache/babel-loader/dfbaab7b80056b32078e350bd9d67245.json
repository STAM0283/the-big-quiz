{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Stats.jsx\";\nimport React from \"react\";\nimport \"../App.css\"; // import Score from \"./Score\";\n\nimport { convertTime } from \"./convertTime.js\";\nimport { categoriesData } from \"./categoriesData.js\";\n\nfunction Stats(props) {\n  let quiz = props.gameParameters.quiz;\n  let score = props.gameParameters.score;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, score // Tri par temps de réponse\n  .sort((playerA, playerB) => {\n    return playerA.answers.map(answer => answer.duration).reduce((acc, val) => acc + val) - playerB.answers.map(answer => answer.duration).reduce((acc, val) => acc + val);\n  }) // Tri par nombre de bonnes réponses / nombre de réponses\n  .sort((playerA, playerB) => {\n    return playerB.answers.filter(answer => answer.correctAnswer).length / playerB.answers.length - playerA.answers.filter(answer => answer.correctAnswer).length / playerA.answers.length;\n  }) // map des joueurs\n  .map((player, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statsContainer\",\n    key: player.playerName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scoreContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"playerName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, i + 1, \" - \", player.playerName), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"playerScore\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, player.answers.filter(answer => answer.correctAnswer).length, \"/\", player.answers.length, \" - \", Math.floor(player.answers.filter(answer => answer.correctAnswer).length / player.answers.length * 10000) / 100 + \" %\"), props.gameParameters.timerParameter > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, \"total time:\", \" \", convertTime(player.answers.map(answer => answer.duration).reduce((acc, val) => acc + val)))) : \"\", props.gameParameters.timerParameter > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"average time:\", \" \", convertTime(player.answers.map(answer => answer.duration).reduce((acc, val) => acc + val) / player.answers.length))) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, player.answers.map((answer, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questionCard\",\n    key: \"answer\" + i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questionCategory\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, categoriesData[quiz[answer.idQuestion].category].icon + \" \", quiz[answer.idQuestion].category.toUpperCase()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questionDifficulty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, quiz[answer.idQuestion].difficulty.toUpperCase()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"questionText\",\n    dangerouslySetInnerHTML: {\n      __html: i + 1 + \". \" + quiz[answer.idQuestion].question\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"correctAnswer questionAnswers\",\n    dangerouslySetInnerHTML: {\n      __html: quiz[answer.idQuestion].correct_answer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }), quiz[answer.idQuestion].incorrect_answers.map((incorrectAnswer, i) => /*#__PURE__*/React.createElement(\"p\", {\n    key: \"incorrectAnswer\" + i,\n    className: i === answer.idIncorrectAnswer ? \"incorrectAnswer questionAnswers\" : \"questionAnswers\",\n    dangerouslySetInnerHTML: {\n      __html: incorrectAnswer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  })), props.gameParameters.timerParameter > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 23\n    }\n  }, \"time: \", convertTime(answer.duration)) : \"\")))))));\n}\n\nexport default Stats;","map":{"version":3,"sources":["/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Stats.jsx"],"names":["React","convertTime","categoriesData","Stats","props","quiz","gameParameters","score","sort","playerA","playerB","answers","map","answer","duration","reduce","acc","val","filter","correctAnswer","length","player","i","playerName","Math","floor","timerParameter","idQuestion","category","icon","toUpperCase","difficulty","__html","question","correct_answer","incorrect_answers","incorrectAnswer","idIncorrectAnswer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n// import Score from \"./Score\";\nimport { convertTime } from \"./convertTime.js\";\nimport { categoriesData } from \"./categoriesData.js\";\n\nfunction Stats(props) {\n  let quiz = props.gameParameters.quiz;\n  let score = props.gameParameters.score;\n\n  return (\n    <div>\n      {/* <Score gameParameters={props.gameParameters} /> */}\n      <div>\n        {score\n          // Tri par temps de réponse\n          .sort((playerA, playerB) => {\n            return (\n              playerA.answers\n                .map((answer) => answer.duration)\n                .reduce((acc, val) => acc + val) -\n              playerB.answers\n                .map((answer) => answer.duration)\n                .reduce((acc, val) => acc + val)\n            );\n          })\n          // Tri par nombre de bonnes réponses / nombre de réponses\n          .sort((playerA, playerB) => {\n            return (\n              playerB.answers.filter((answer) => answer.correctAnswer).length /\n                playerB.answers.length -\n              playerA.answers.filter((answer) => answer.correctAnswer).length /\n                playerA.answers.length\n            );\n          })\n          // map des joueurs\n          .map((player, i) => (\n            <div className=\"statsContainer\" key={player.playerName}>\n              <div className=\"scoreContainer\">\n                <p className=\"playerName\">\n                  {i + 1} - {player.playerName}\n                </p>\n                <p className=\"playerScore\">\n                  {\n                    player.answers.filter((answer) => answer.correctAnswer)\n                      .length\n                  }\n                  /{player.answers.length}\n                  {\" - \"}\n                  {Math.floor(\n                    (player.answers.filter((answer) => answer.correctAnswer)\n                      .length /\n                      player.answers.length) *\n                      10000\n                  ) /\n                    100 +\n                    \" %\"}\n                </p>\n                {props.gameParameters.timerParameter > 0 ? (\n                  <p>\n                    <b>\n                      total time:{\" \"}\n                      {convertTime(\n                        player.answers\n                          .map((answer) => answer.duration)\n                          .reduce((acc, val) => acc + val)\n                      )}\n                    </b>\n                  </p>\n                ) : (\n                  \"\"\n                )}\n                {props.gameParameters.timerParameter > 0 ? (\n                  <p>\n                    <b>\n                      average time:{\" \"}\n                      {convertTime(\n                        player.answers\n                          .map((answer) => answer.duration)\n                          .reduce((acc, val) => acc + val) /\n                          player.answers.length\n                      )}\n                    </b>\n                  </p>\n                ) : (\n                  \"\"\n                )}\n              </div>\n              {/* map des question d'un joueur */}\n              <div className=\"cardContainer\">\n                {player.answers.map((answer, i) => (\n                  <div className=\"questionCard\" key={\"answer\" + i}>\n                    <div className=\"questionCategory\">\n                      {categoriesData[quiz[answer.idQuestion].category].icon +\n                        \" \"}\n                      {quiz[answer.idQuestion].category.toUpperCase()}\n                    </div>\n                    <div className=\"questionDifficulty\">\n                      {quiz[answer.idQuestion].difficulty.toUpperCase()}\n                    </div>\n                    <p className=\"questionText\" dangerouslySetInnerHTML={{ __html:  i + 1+\". \"+quiz[answer.idQuestion].question}}>\n                      {/* {i + 1}\n                      {\". \"}\n                      {quiz[answer.idQuestion].question} */}\n                    </p>\n                    {/* bonne réponse */}\n                    <p className=\"correctAnswer questionAnswers\" dangerouslySetInnerHTML={{ __html:  quiz[answer.idQuestion].correct_answer}}> \n                      \n                    </p>\n                    {/* map des mauvaises réponses d'une question */}\n                    {quiz[answer.idQuestion].incorrect_answers.map(\n                      (incorrectAnswer, i) => (\n                        <p\n                          key={\"incorrectAnswer\" + i}\n                          className={\n                            i === answer.idIncorrectAnswer\n                              ? \"incorrectAnswer questionAnswers\"\n                              : \"questionAnswers\"\n                          }\n                          dangerouslySetInnerHTML={{ __html:  incorrectAnswer}}\n                        >\n                          \n                        </p>\n                      )\n                    )}\n                    {props.gameParameters.timerParameter > 0 ? (\n                      <p>time: {convertTime(answer.duration)}</p>\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Stats;\n"]},"metadata":{},"sourceType":"module"}
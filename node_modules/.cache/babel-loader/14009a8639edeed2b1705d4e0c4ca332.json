{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Game.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport Score from \"./Score\";\nimport { Card, CardText, Row, Col, Progress } from \"reactstrap\";\nimport \"./../App.css\"; // import { categoriesData } from \"./categoriesData.js\";\n\nfunction randomize(array) {\n  let i, j, mixed;\n\n  for (i = array.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    mixed = array[i];\n    array[i] = array[j];\n    array[j] = mixed;\n  }\n\n  return array;\n}\n\nfunction Game(props) {\n  const score = props.gameParameters.score;\n  const setScore = props.gameParameters.setScore;\n  const playerNames = props.gameParameters.playerNames;\n  const timerParameter = props.gameParameters.timerParameter;\n  useEffect(() => {\n    let array = [];\n\n    for (let player of props.gameParameters.playerNames) {\n      array.push({\n        playerName: player,\n        answers: []\n      });\n      setScore(array);\n    }\n  }, []);\n  let history = useHistory();\n  const [timer, setTimer] = useState(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n  const [timerOn, setTimerOn] = useState(true);\n  useEffect(() => {\n    if (timerOn) {\n      const id = setInterval(() => {\n        setTimer(timer => timer - 1);\n      }, 1000);\n      return () => clearInterval(id);\n    }\n\n    return undefined;\n  }, [timerOn]);\n  const [id, setId] = useState(0);\n  const [idActualPlayer, setIdActualPlayer] = useState(0);\n  const [questionNumberOfActualPlayer, setQuestionNumberOfActualPlayer] = useState(1);\n  const [goodAnswerModalIsOpen, setGoodAnswerModalIsOpen] = useState(false);\n  const [wrongAnswerModalIsOpen, setWrongAnswerModalIsOpen] = useState(false);\n  const [timeOffModal, setTimeOffModal] = useState(false);\n  const [tableAnswer, setTableAnswer] = useState(null); // const [displayQuestionNumber, setDisplayQuestionNumber] = useState(\n  //   idActualPlayer +\n  //     \"/\" +\n  //     props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers\n  // );\n  // const [percentRange, setPercentRange] = useState(\n  //   props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers\n  // );\n\n  let difficulty = props.gameParameters.difficultyLevel;\n  let numberOfQuestion = props.gameParameters.nbPlayers * props.gameParameters.nbQuestionsPerPlayer;\n  let categoryOfQuestion = props.gameParameters.category;\n  let questionType = props.gameParameters.questionsType;\n\n  const handleModalGoodAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n  };\n\n  const handleModalWrongAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n  };\n\n  const handelModalTimerOff = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setTimeOffModal(false);\n  };\n\n  const handleModalGoodAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n\n  const handleModalWrongAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n\n  const handelModalTimerOff2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setId(id + 1);\n    setTimeOffModal(false);\n    history.push(\"/stats\");\n  };\n\n  const handelGoodAnswer = () => {\n    setTimerOn(false);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    let tmp = score; // console.log(\"tmp : \", tmp)\n    // console.log(\"tmp2 : \", tmp.filter(player=>player.playerName===playerNames[idActualPlayer])[0].answers);\n\n    let arr = tmp.filter(player => player.playerName === playerNames[idActualPlayer])[0].answers;\n    arr.push({\n      idQuestion: id,\n      correctAnswer: true,\n      idIncorrectAnswer: -1,\n      duration: timerParameter - timer\n    }); //console.log(\"arr:\",arr);\n\n    /************************************************************************************ */\n\n    /************************************************************************************ */\n\n    setScore(prevScore => {\n      /*console.log('Good');\n      console.log(prevScore);\n      console.log(idActualPlayer);\n      console.log(prevScore[0].playerName);\n      console.log(prevScore[1].playerName);*/\n      let tmpArr = prevScore;\n      tmpArr[idActualPlayer].answers = arr; // console.log('tmpArr :', tmpArr);\n      // console.log('idActualPlayer :', idActualPlayer);\n\n      return tmpArr;\n    });\n    setGoodAnswerModalIsOpen(true);\n  };\n\n  const handleWrongAnswer = e => {\n    // console.log(\"e.target\",e.target);\n    // console.log(\"e.target.parentNode\",e.target.parentNode);\n    // console.log(\"e.target.attributes.idincorrectanswer.value\",parseInt(e.target.attributes.idincorrectanswer.value));\n    setTimerOn(false);\n    setTimer(props.gameParameters.timerParameter === 0 ? \"\" : props.gameParameters.timerParameter);\n    let tmp = score; // console.log(\"tmp : \", tmp)\n    // console.log(\"tmp2 : \", tmp.filter(player=>player.playerName===playerNames[idActualPlayer])[0].answers);\n\n    let arr = tmp.filter(player => player.playerName === playerNames[idActualPlayer])[0].answers;\n    arr.push({\n      idQuestion: id,\n      correctAnswer: false,\n      idIncorrectAnswer: parseInt(e.target.attributes.idincorrectanswer.value),\n      duration: timerParameter - timer\n    }); // console.log(arr);\n\n    setScore(prevScore => {\n      // console.log('Wrong');\n      // console.log(prevScore);\n      // console.log(idActualPlayer);\n      // console.log(prevScore[0].playerName);\n      // console.log(prevScore[1].playerName);\n      let tmpArr = prevScore;\n      tmpArr[idActualPlayer].answers = arr; // console.log('tmpArr :', tmpArr);\n      // console.log('idActualPlayer :', idActualPlayer);\n\n      return tmpArr;\n    });\n    /******************************************************************************************* */\n\n    setWrongAnswerModalIsOpen(true);\n  };\n\n  useEffect(() => {\n    axios.get(`https://opentdb.com/api.php?amount=${numberOfQuestion}&category=${categoryOfQuestion}&difficulty=${difficulty}&type=${questionType}`).then(res => {\n      props.gameParameters.setQuiz(res.data.results);\n      setTableAnswer(randomize([[res.data.results[id].correct_answer, -1], [res.data.results[id].incorrect_answers[0], 0], [res.data.results[id].incorrect_answers[1], 1], [res.data.results[id].incorrect_answers[2], 2]]));\n    });\n  }, []);\n  useEffect(() => {\n    if (props.gameParameters.quiz !== null) {\n      setTableAnswer(props.gameParameters.quiz[id].type !== \"boolean\" ? randomize([[props.gameParameters.quiz[id].correct_answer, -1], [props.gameParameters.quiz[id].incorrect_answers[0], 0], [props.gameParameters.quiz[id].incorrect_answers[1], 1], [props.gameParameters.quiz[id].incorrect_answers[2], 2]]) : randomize([[props.gameParameters.quiz[id].correct_answer, -1], [props.gameParameters.quiz[id].incorrect_answers[0], 0]]));\n    }\n  }, [id]);\n\n  function browseTable() {\n    setIdActualPlayer(idActualPlayer === props.gameParameters.nbPlayers - 1 ? 0 : idActualPlayer + 1);\n    setId(id + 1);\n    setQuestionNumberOfActualPlayer(questionNumberOfActualPlayer + 1); // setDisplayQuestionNumber(\n    //   `${questionNumberOfActualPlayer} / ${props.gameParameters.nbQuestionsPerPlayer}`\n    // );\n  }\n\n  let catLinkImg = \"\";\n\n  if (props.gameParameters.quiz !== null) {\n    catLinkImg = props.gameParameters.quiz[id].category;\n  }\n\n  const regTest = catLinkImg.replace(/[^\\w\\s]/gi, \"\");\n  const okespace = regTest.replace(/ /g, \"\");\n  const divStyle = {\n    backgroundImage: `url(\"${okespace}.jpg\")`,\n    backgroundSize: \"cover\"\n  };\n  return props.gameParameters.quiz !== null && tableAnswer !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"3\",\n    md: {\n      size: 3\n    },\n    m: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }, id >= props.gameParameters.nbPlayers ? /*#__PURE__*/React.createElement(Score, {\n    gameParameters: props.gameParameters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }) : \"\"), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: {\n      size: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }, timer === 1 && timeOffModal === false ? setTimeOffModal(true) : timer, timer === 1 && timeOffModal === false ? setTimerOn(false) : \"\", timer === -1 && timerOn === true ? setTimerOn(false) : \"\", timer === -1 && timerOn === true ? setTimer(\"\") : \"\", /*#__PURE__*/React.createElement(Modal, {\n    isOpen: goodAnswerModalIsOpen,\n    ariaHideApp: false,\n    style: {\n      content: {\n        backgroundColor: \"#FDF1D8\",\n        width: \"600px\",\n        height: \"200px\",\n        textAlign: \"center\",\n        fontSize: \"x-large\",\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        border: \"solid 1px black\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 19\n    }\n  }, \"Good Answer :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      marginTop: \"20px\",\n      backgroundColor: \"#D1C2EB\",\n      width: \"90px\",\n      height: \"50px\",\n      borderRadius: \"5px\",\n      fontSize: \"x-large\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handleModalGoodAnswer : handleModalGoodAnswer2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: wrongAnswerModalIsOpen,\n    ariaHideApp: false,\n    style: {\n      content: {\n        backgroundColor: \"#D57F8E\",\n        width: \"600px\",\n        height: \"200px\",\n        textAlign: \"center\",\n        fontSize: \"x-large\",\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        border: \"solid 1px black\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"modal-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 19\n    }\n  }, \"Wrong Answer :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"modal-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 19\n    }\n  }, \"The good answer is :\", \" \", props.gameParameters.quiz[id].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: \"#E0B5E3\",\n      width: \"90px\",\n      height: \"50px\",\n      borderRadius: \"5px\",\n      fontSize: \"x-large\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handleModalWrongAnswer : handleModalWrongAnswer2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: timeOffModal,\n    ariaHideApp: false,\n    style: {\n      content: {\n        backgroundColor: \"#D57F8E\",\n        width: \"600px\",\n        height: \"200px\",\n        textAlign: \"center\",\n        fontSize: \"x-large\",\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        border: \"solid 1px black\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 19\n    }\n  }, \"Time is up :\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 19\n    }\n  }, \"The good answer was :\", \" \", props.gameParameters.quiz[id].correct_answer), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      width: \"15%\",\n      fontSize: \"xx-large\",\n      color: \"black\"\n    },\n    onClick: id + 1 !== numberOfQuestion ? handelModalTimerOff : handelModalTimerOff2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 19\n    }\n  }, id + 1 !== numberOfQuestion ? \"Next\" : \"results\")), /*#__PURE__*/React.createElement(Progress, {\n    style: {\n      backgroundColor: \"#FFE74C\",\n      width: \"70%\",\n      height: \"50px\",\n      borderRadius: \"5px\"\n    },\n    value: questionNumberOfActualPlayer * 100 / (props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 17\n    }\n  }, \"Check your progress here\"), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 17\n    }\n  }, \"Actual player:\", \" \", props.gameParameters.playerNames[idActualPlayer]), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 17\n    }\n  }, \"Category : \", props.gameParameters.quiz[id].category), /*#__PURE__*/React.createElement(CardText, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 17\n    }\n  }, \"Difficulty :\", props.gameParameters.quiz[id].difficulty === \"hard\" ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#FF0921\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 21\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty) : props.gameParameters.quiz[id].difficulty === \"medium\" ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#dc7f9bs\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 21\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty) : /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#f6b83c\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 21\n    }\n  }, \" \", props.gameParameters.quiz[id].difficulty, \" \")), /*#__PURE__*/React.createElement(CardText, {\n    className: \"question-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 17\n    }\n  }, \"Question :\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: props.gameParameters.quiz[id].question\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: {\n      size: 6,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"bordureCardReponse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 15\n    }\n  }, tableAnswer.map((answer, i) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: `answer buttonAnswer_${i}`,\n      key: i,\n      idincorrectanswer: answer[1],\n      onClick: answer[0] === props.gameParameters.quiz[id].correct_answer ? handelGoodAnswer : handleWrongAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      idincorrectanswer: answer[1],\n      dangerouslySetInnerHTML: {\n        __html: answer[0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 23\n      }\n    }));\n  }))))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 5\n    }\n  }, \"Loading...\");\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/wilder/Documents/Lyon-js-202005-project-the-big-quizz/src/components/Game.jsx"],"names":["React","useState","useEffect","useHistory","Modal","axios","Score","Card","CardText","Row","Col","Progress","randomize","array","i","j","mixed","length","Math","floor","random","Game","props","score","gameParameters","setScore","playerNames","timerParameter","player","push","playerName","answers","history","timer","setTimer","timerOn","setTimerOn","id","setInterval","clearInterval","undefined","setId","idActualPlayer","setIdActualPlayer","questionNumberOfActualPlayer","setQuestionNumberOfActualPlayer","goodAnswerModalIsOpen","setGoodAnswerModalIsOpen","wrongAnswerModalIsOpen","setWrongAnswerModalIsOpen","timeOffModal","setTimeOffModal","tableAnswer","setTableAnswer","difficulty","difficultyLevel","numberOfQuestion","nbPlayers","nbQuestionsPerPlayer","categoryOfQuestion","category","questionType","questionsType","handleModalGoodAnswer","browseTable","handleModalWrongAnswer","handelModalTimerOff","handleModalGoodAnswer2","handleModalWrongAnswer2","handelModalTimerOff2","handelGoodAnswer","tmp","arr","filter","idQuestion","correctAnswer","idIncorrectAnswer","duration","prevScore","tmpArr","handleWrongAnswer","e","parseInt","target","attributes","idincorrectanswer","value","get","then","res","setQuiz","data","results","correct_answer","incorrect_answers","quiz","type","catLinkImg","regTest","replace","okespace","divStyle","backgroundImage","backgroundSize","size","content","backgroundColor","width","height","textAlign","fontSize","position","left","top","transform","border","marginTop","borderRadius","color","__html","question","offset","map","answer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\nimport Score from \"./Score\";\nimport { Card, CardText, Row, Col, Progress } from \"reactstrap\";\nimport \"./../App.css\";\n// import { categoriesData } from \"./categoriesData.js\";\n\nfunction randomize(array) {\n  let i, j, mixed;\n  for (i = array.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    mixed = array[i];\n    array[i] = array[j];\n    array[j] = mixed;\n  }\n  return array;\n}\n\nfunction Game(props) {\n  const score = props.gameParameters.score;\n  const setScore = props.gameParameters.setScore;\n  const playerNames = props.gameParameters.playerNames;\n  const timerParameter = props.gameParameters.timerParameter;\n\n  useEffect(() => {\n    let array = [];\n    for (let player of props.gameParameters.playerNames) {\n      array.push({\n        playerName: player,\n        answers: [],\n      });\n      setScore(array);\n    }\n  }, []);\n\n  let history = useHistory();\n\n  const [timer, setTimer] = useState(\n    props.gameParameters.timerParameter === 0\n      ? \"\"\n      : props.gameParameters.timerParameter\n  );\n  const [timerOn, setTimerOn] = useState(true);\n\n  useEffect(() => {\n    if (timerOn) {\n      const id = setInterval(() => {\n        setTimer((timer) => timer - 1);\n      }, 1000);\n      return () => clearInterval(id);\n    }\n    return undefined;\n  }, [timerOn]);\n\n  const [id, setId] = useState(0);\n  const [idActualPlayer, setIdActualPlayer] = useState(0);\n  const [\n    questionNumberOfActualPlayer,\n    setQuestionNumberOfActualPlayer,\n  ] = useState(1);\n  const [goodAnswerModalIsOpen, setGoodAnswerModalIsOpen] = useState(false);\n  const [wrongAnswerModalIsOpen, setWrongAnswerModalIsOpen] = useState(false);\n  const [timeOffModal, setTimeOffModal] = useState(false);\n  const [tableAnswer, setTableAnswer] = useState(null);\n  // const [displayQuestionNumber, setDisplayQuestionNumber] = useState(\n  //   idActualPlayer +\n  //     \"/\" +\n  //     props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers\n  // );\n  // const [percentRange, setPercentRange] = useState(\n  //   props.gameParameters.nbQuestionsPerPlayer * props.gameParameters.nbPlayers\n  // );\n\n  let difficulty = props.gameParameters.difficultyLevel;\n  let numberOfQuestion =\n    props.gameParameters.nbPlayers * props.gameParameters.nbQuestionsPerPlayer;\n  let categoryOfQuestion = props.gameParameters.category;\n  let questionType = props.gameParameters.questionsType;\n\n  const handleModalGoodAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setGoodAnswerModalIsOpen(false);\n  };\n  const handleModalWrongAnswer = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    setWrongAnswerModalIsOpen(false);\n  };\n  const handelModalTimerOff = () => {\n    browseTable();\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setTimeOffModal(false);\n  };\n  const handleModalGoodAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setGoodAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n  const handleModalWrongAnswer2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setWrongAnswerModalIsOpen(false);\n    history.push(\"/stats\");\n  };\n  const handelModalTimerOff2 = () => {\n    setTimerOn(true);\n    setTimer(props.gameParameters.timerParameter);\n    setId(id + 1);\n    setTimeOffModal(false);\n    history.push(\"/stats\");\n  };\n\n  const handelGoodAnswer = () => {\n    setTimerOn(false);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n\n    let tmp = score;\n    // console.log(\"tmp : \", tmp)\n    // console.log(\"tmp2 : \", tmp.filter(player=>player.playerName===playerNames[idActualPlayer])[0].answers);\n    let arr = tmp.filter(\n      (player) => player.playerName === playerNames[idActualPlayer]\n    )[0].answers;\n    arr.push({\n      idQuestion: id,\n      correctAnswer: true,\n      idIncorrectAnswer: -1,\n      duration: timerParameter - timer,\n    });\n    //console.log(\"arr:\",arr);\n    /************************************************************************************ */\n    /************************************************************************************ */\n    setScore((prevScore) => {\n      /*console.log('Good');\n      console.log(prevScore);\n      console.log(idActualPlayer);\n      console.log(prevScore[0].playerName);\n      console.log(prevScore[1].playerName);*/\n\n      let tmpArr = prevScore;\n      tmpArr[idActualPlayer].answers = arr;\n      // console.log('tmpArr :', tmpArr);\n      // console.log('idActualPlayer :', idActualPlayer);\n      return tmpArr;\n    });\n\n    setGoodAnswerModalIsOpen(true);\n  };\n  const handleWrongAnswer = (e) => {\n    // console.log(\"e.target\",e.target);\n    // console.log(\"e.target.parentNode\",e.target.parentNode);\n    // console.log(\"e.target.attributes.idincorrectanswer.value\",parseInt(e.target.attributes.idincorrectanswer.value));\n\n    setTimerOn(false);\n    setTimer(\n      props.gameParameters.timerParameter === 0\n        ? \"\"\n        : props.gameParameters.timerParameter\n    );\n    let tmp = score;\n    // console.log(\"tmp : \", tmp)\n    // console.log(\"tmp2 : \", tmp.filter(player=>player.playerName===playerNames[idActualPlayer])[0].answers);\n    let arr = tmp.filter(\n      (player) => player.playerName === playerNames[idActualPlayer]\n    )[0].answers;\n    arr.push({\n      idQuestion: id,\n      correctAnswer: false,\n      idIncorrectAnswer: parseInt(e.target.attributes.idincorrectanswer.value),\n      duration: timerParameter - timer,\n    });\n    // console.log(arr);\n    setScore((prevScore) => {\n      // console.log('Wrong');\n      // console.log(prevScore);\n      // console.log(idActualPlayer);\n      // console.log(prevScore[0].playerName);\n      // console.log(prevScore[1].playerName);\n      let tmpArr = prevScore;\n      tmpArr[idActualPlayer].answers = arr;\n      // console.log('tmpArr :', tmpArr);\n      // console.log('idActualPlayer :', idActualPlayer);\n      return tmpArr;\n    });\n\n    /******************************************************************************************* */\n    setWrongAnswerModalIsOpen(true);\n  };\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://opentdb.com/api.php?amount=${numberOfQuestion}&category=${categoryOfQuestion}&difficulty=${difficulty}&type=${questionType}`\n      )\n      .then((res) => {\n        props.gameParameters.setQuiz(res.data.results);\n        setTableAnswer(\n          randomize([\n            [res.data.results[id].correct_answer, -1],\n            [res.data.results[id].incorrect_answers[0], 0],\n            [res.data.results[id].incorrect_answers[1], 1],\n            [res.data.results[id].incorrect_answers[2], 2],\n          ])\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    if (props.gameParameters.quiz !== null) {\n      setTableAnswer(\n        props.gameParameters.quiz[id].type !== \"boolean\"\n          ? randomize([\n              [props.gameParameters.quiz[id].correct_answer, -1],\n              [props.gameParameters.quiz[id].incorrect_answers[0], 0],\n              [props.gameParameters.quiz[id].incorrect_answers[1], 1],\n              [props.gameParameters.quiz[id].incorrect_answers[2], 2],\n            ])\n          : randomize([\n              [props.gameParameters.quiz[id].correct_answer, -1],\n              [props.gameParameters.quiz[id].incorrect_answers[0], 0],\n            ])\n      );\n    }\n  }, [id]);\n\n  function browseTable() {\n    setIdActualPlayer(\n      idActualPlayer === props.gameParameters.nbPlayers - 1\n        ? 0\n        : idActualPlayer + 1\n    );\n    setId(id + 1);\n    setQuestionNumberOfActualPlayer(questionNumberOfActualPlayer + 1);\n    // setDisplayQuestionNumber(\n    //   `${questionNumberOfActualPlayer} / ${props.gameParameters.nbQuestionsPerPlayer}`\n    // );\n  }\n  let catLinkImg = \"\";\n  if (props.gameParameters.quiz !== null) {\n    catLinkImg = props.gameParameters.quiz[id].category;\n  }\n\n  const regTest = catLinkImg.replace(/[^\\w\\s]/gi, \"\");\n  const okespace = regTest.replace(/ /g, \"\");\n\n  const divStyle = {\n    backgroundImage: `url(\"${okespace}.jpg\")`,\n    backgroundSize: \"cover\",\n  };\n\n  return props.gameParameters.quiz !== null && tableAnswer !== null ? (\n    <>\n      <div style={divStyle}>\n        <Row>\n          <Col sm=\"3\" md={{ size: 3 }} m=\"3\">\n            {id >= props.gameParameters.nbPlayers ? (\n              <Score gameParameters={props.gameParameters} />\n            ) : (\n              \"\"\n            )}\n          </Col>\n          <Col sm=\"12\" md={{ size: 6 }}>\n            <Card className=\"test\">\n              <div className=\"game\">\n                {timer === 1 && timeOffModal === false\n                  ? setTimeOffModal(true)\n                  : timer}\n                {timer === 1 && timeOffModal === false ? setTimerOn(false) : \"\"}\n                {timer === -1 && timerOn === true ? setTimerOn(false) : \"\"}\n                {timer === -1 && timerOn === true ? setTimer(\"\") : \"\"}\n\n                <Modal\n                  isOpen={goodAnswerModalIsOpen}\n                  ariaHideApp={false}\n                  style={{\n                    content: {\n                      backgroundColor: \"#FDF1D8\",\n                      width: \"600px\",\n                      height: \"200px\",\n                      textAlign: \"center\",\n                      fontSize: \"x-large\",\n                      position: \"absolute\",\n                      left: \"50%\",\n                      top: \"50%\",\n                      transform: \"translate(-50%, -50%)\",\n                      border: \"solid 1px black\",\n                    },\n                  }}\n                >\n                  <h2>\n                    Good Answer :{\" \"}\n                    {props.gameParameters.playerNames[idActualPlayer]}\n                  </h2>\n                  <button\n                    style={{\n                      marginTop: \"20px\",\n                      backgroundColor: \"#D1C2EB\",\n                      width: \"90px\",\n                      height: \"50px\",\n                      borderRadius: \"5px\",\n                      fontSize: \"x-large\",\n                    }}\n                    onClick={\n                      id + 1 !== numberOfQuestion\n                        ? handleModalGoodAnswer\n                        : handleModalGoodAnswer2\n                    }\n                  >\n                    {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                  </button>\n                </Modal>\n                <Modal\n                  isOpen={wrongAnswerModalIsOpen}\n                  ariaHideApp={false}\n                  style={{\n                    content: {\n                      backgroundColor: \"#D57F8E\",\n                      width: \"600px\",\n                      height: \"200px\",\n                      textAlign: \"center\",\n                      fontSize: \"x-large\",\n                      position: \"absolute\",\n                      left: \"50%\",\n                      top: \"50%\",\n                      transform: \"translate(-50%, -50%)\",\n                      border: \"solid 1px black\",\n                    },\n                  }}\n                >\n                  <h2 className=\"modal-answer\">\n                    Wrong Answer :{\" \"}\n                    {props.gameParameters.playerNames[idActualPlayer]}\n                  </h2>\n                  <p className=\"modal-answer\">\n                    The good answer is :{\" \"}\n                    {props.gameParameters.quiz[id].correct_answer}\n                  </p>\n                  <button\n                    style={{\n                      backgroundColor: \"#E0B5E3\",\n                      width: \"90px\",\n                      height: \"50px\",\n                      borderRadius: \"5px\",\n                      fontSize: \"x-large\",\n                    }}\n                    onClick={\n                      id + 1 !== numberOfQuestion\n                        ? handleModalWrongAnswer\n                        : handleModalWrongAnswer2\n                    }\n                  >\n                    {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                  </button>\n                </Modal>\n                <Modal\n                  isOpen={timeOffModal}\n                  ariaHideApp={false}\n                  style={{\n                    content: {\n                      backgroundColor: \"#D57F8E\",\n                      width: \"600px\",\n                      height: \"200px\",\n                      textAlign: \"center\",\n                      fontSize: \"x-large\",\n                      position: \"absolute\",\n                      left: \"50%\",\n                      top: \"50%\",\n                      transform: \"translate(-50%, -50%)\",\n                      border: \"solid 1px black\",\n                    },\n                  }}\n                >\n                  <h2>\n                    Time is up :{\" \"}\n                    {props.gameParameters.playerNames[idActualPlayer]}\n                  </h2>\n                  <p>\n                    The good answer was :{\" \"}\n                    {props.gameParameters.quiz[id].correct_answer}\n                  </p>\n                  <button\n                    style={{\n                      width: \"15%\",\n                      fontSize: \"xx-large\",\n                      color: \"black\",\n                    }}\n                    onClick={\n                      id + 1 !== numberOfQuestion\n                        ? handelModalTimerOff\n                        : handelModalTimerOff2\n                    }\n                  >\n                    {id + 1 !== numberOfQuestion ? \"Next\" : \"results\"}\n                  </button>\n                </Modal>\n                {/* <div className=\"tableOfGamers\">\n                  <table className=\"board\">\n                    <thead>\n                      <tr>\n                        <th>The list of players</th>\n                        <th>Answer</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props.gameParameters.playerNames.map((name) => {\n                        return (\n                          <tr key={name}>\n                            <td>{name}</td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div> */}\n                <Progress\n                  style={{\n                    backgroundColor: \"#FFE74C\",\n                    width: \"70%\",\n                    height: \"50px\",\n                    borderRadius: \"5px\",\n                  }}\n                  value={\n                    (questionNumberOfActualPlayer * 100) /\n                    (props.gameParameters.nbQuestionsPerPlayer *\n                      props.gameParameters.nbPlayers)\n                  }\n                >\n                  Check your progress here\n                </Progress>\n                <CardText className=\"\">\n                  Actual player:{\" \"}\n                  {props.gameParameters.playerNames[idActualPlayer]}\n                </CardText>\n                <CardText className=\"\"></CardText>\n                <CardText className=\"\">\n                  Category : {props.gameParameters.quiz[id].category}\n                </CardText>\n                {/* <CardText className=\"\">\n                  Type : {questionType || \"Any Type\"}\n                </CardText> */}\n                <CardText className=\"\">\n                  Difficulty :\n                  {props.gameParameters.quiz[id].difficulty === \"hard\" ? (\n                    <span style={{ color: \"#FF0921\" }}>\n                      {\" \"}\n                      {props.gameParameters.quiz[id].difficulty}\n                    </span>\n                  ) : props.gameParameters.quiz[id].difficulty === \"medium\" ? (\n                    <span style={{ color: \"#dc7f9bs\" }}>\n                      {\" \"}\n                      {props.gameParameters.quiz[id].difficulty}\n                    </span>\n                  ) : (\n                    <span style={{ color: \"#f6b83c\" }}>\n                      {\" \"}\n                      {props.gameParameters.quiz[id].difficulty}{\" \"}\n                    </span>\n                  )}\n                </CardText>\n\n                <CardText className=\"question-style\">\n                  Question :{\" \"}\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: props.gameParameters.quiz[id].question,\n                    }}\n                  ></span>\n                </CardText>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n            <Card className=\"bordureCardReponse\">\n              <div>\n                {tableAnswer.map((answer, i) => {\n                  return (\n                    <button\n                      className={`answer buttonAnswer_${i}`}\n                      key={i}\n                      idincorrectanswer={answer[1]}\n                      onClick={\n                        answer[0] ===\n                        props.gameParameters.quiz[id].correct_answer\n                          ? handelGoodAnswer\n                          : handleWrongAnswer\n                      }\n                    >\n                      <span\n                        idincorrectanswer={answer[1]}\n                        dangerouslySetInnerHTML={{ __html: answer[0] }}\n                      ></span>\n                    </button>\n                  );\n                })}\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    </>\n  ) : (\n    <p>Loading...</p>\n  );\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}
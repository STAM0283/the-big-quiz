{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Documents/projets-perso/the_big_quiz/src/components/NbPlayers.jsx\";\nimport React from \"react\";\nimport \"../App.css\"; // import { Card, CardTitle, CardText, Row, Col } from \"reactstrap\";\n\nfunction NbPlayers(props) {\n  //console.log(\"props de NbPlayers:\", props);\n  const handleChangeNbPlayers = (e, tmpPlayerNames, tmpNbQuestionsPerPlayer, tmpNbPlayerMax, tmpNbPlayers) => {\n    if (e.target.value.length > 0 && e.target.value >= props.gameParameters.nbPlayersMin && e.target.value <= props.gameParameters.nbPlayersMax) {\n      tmpPlayerNames = tmpPlayerNames.slice(0, parseInt(e.target.value, 10));\n\n      for (let i = tmpPlayerNames.length + 1; i <= e.target.value; i++) {\n        tmpPlayerNames.push(\"Player #\" + i);\n      }\n\n      props.gameParameters.setNbPlayers(parseInt(e.target.value, 10));\n      props.gameParameters.setPlayerNames(tmpPlayerNames);\n      props.gameParameters.setMaxQuestionsPerPlayer(Math.floor(50 / e.target.value));\n    }\n\n    if (tmpNbQuestionsPerPlayer > Math.floor(50 / e.target.value) && tmpNbPlayers < tmpNbPlayerMax) {\n      props.gameParameters.setNbQuestionsPerPlayer(Math.floor(50 / e.target.value));\n    }\n  };\n\n  const handleChangeName = (e, tmpPlayerNames) => {\n    tmpPlayerNames[e.target.id] = e.target.value;\n    props.gameParameters.setPlayerNames(tmpPlayerNames);\n  };\n\n  const handleInvalidName = (e, tmpPlayerNames) => {\n    tmpPlayerNames[e.target.id] = \"Player #\" + (parseInt(e.target.id, 10) + 1);\n    props.gameParameters.setPlayerNames(tmpPlayerNames);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"nbPlayers\",\n    className: \"player-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Numbers of players: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-style\",\n    type: \"number\",\n    id: \"nbPlayers\",\n    name: \"nbPlayers\",\n    value: props.gameParameters.nbPlayers,\n    onChange: e => handleChangeNbPlayers(e, [...props.gameParameters.playerNames], props.gameParameters.nbQuestionsPerPlayer, props.gameParameters.nbPlayersMax, props.gameParameters.nbPlayers),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, props.gameParameters.playerNames.map((playerName, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: i,\n    className: \"player-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Name of player #\", i + 1, \": \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-style\",\n    id: i,\n    type: \"text\",\n    value: playerName,\n    onChange: e => handleChangeName(e, [...props.gameParameters.playerNames]),\n    onBlur: e => e.target.value.length < 1 || props.gameParameters.playerNames.indexOf(e.target.value) !== props.gameParameters.playerNames.lastIndexOf(e.target.value) ? handleInvalidName(e, [...props.gameParameters.playerNames]) : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default NbPlayers;","map":{"version":3,"sources":["/home/wilder/Documents/projets-perso/the_big_quiz/src/components/NbPlayers.jsx"],"names":["React","NbPlayers","props","handleChangeNbPlayers","e","tmpPlayerNames","tmpNbQuestionsPerPlayer","tmpNbPlayerMax","tmpNbPlayers","target","value","length","gameParameters","nbPlayersMin","nbPlayersMax","slice","parseInt","i","push","setNbPlayers","setPlayerNames","setMaxQuestionsPerPlayer","Math","floor","setNbQuestionsPerPlayer","handleChangeName","id","handleInvalidName","nbPlayers","playerNames","nbQuestionsPerPlayer","map","playerName","indexOf","lastIndexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n// import { Card, CardTitle, CardText, Row, Col } from \"reactstrap\";\n\n\nfunction NbPlayers(props) {\n  //console.log(\"props de NbPlayers:\", props);\n\n  const handleChangeNbPlayers = (\n    e,\n    tmpPlayerNames,\n    tmpNbQuestionsPerPlayer,\n    tmpNbPlayerMax,\n    tmpNbPlayers\n  ) => {\n    if (\n      e.target.value.length > 0 &&\n      e.target.value >= props.gameParameters.nbPlayersMin &&\n      e.target.value <= props.gameParameters.nbPlayersMax\n    ) {\n      tmpPlayerNames = tmpPlayerNames.slice(0, parseInt(e.target.value, 10));\n      for (let i = tmpPlayerNames.length + 1; i <= e.target.value; i++) {\n        tmpPlayerNames.push(\"Player #\" + i);\n      }\n      props.gameParameters.setNbPlayers(parseInt(e.target.value, 10));\n      props.gameParameters.setPlayerNames(tmpPlayerNames);\n      props.gameParameters.setMaxQuestionsPerPlayer(\n        Math.floor(50 / e.target.value)\n      );\n    }\n\n    if (\n      tmpNbQuestionsPerPlayer > Math.floor(50 / e.target.value) &&\n      tmpNbPlayers < tmpNbPlayerMax\n    ) {\n      props.gameParameters.setNbQuestionsPerPlayer(\n        Math.floor(50 / e.target.value)\n      );\n    }\n  };\n\n  const handleChangeName = (e, tmpPlayerNames) => {\n    tmpPlayerNames[e.target.id] = e.target.value;\n\n    props.gameParameters.setPlayerNames(tmpPlayerNames);\n  };\n\n  const handleInvalidName = (e, tmpPlayerNames) => {\n    tmpPlayerNames[e.target.id] = \"Player #\" + (parseInt(e.target.id, 10) + 1);\n    props.gameParameters.setPlayerNames(tmpPlayerNames);\n  };\n\n  return (\n    <>\n      <div>\n        <label htmlFor=\"nbPlayers\" className=\"player-info\">Numbers of players: </label>\n        <input\n          className=\"input-style\"\n          type=\"number\"\n          id=\"nbPlayers\"\n          name=\"nbPlayers\"\n          value={props.gameParameters.nbPlayers}\n          onChange={(e) =>\n            handleChangeNbPlayers(\n              e,\n              [...props.gameParameters.playerNames],\n              props.gameParameters.nbQuestionsPerPlayer,\n              props.gameParameters.nbPlayersMax,\n              props.gameParameters.nbPlayers\n            )\n          }\n        />\n      </div>\n      <div>\n        {props.gameParameters.playerNames.map((playerName, i) => (\n          <div key={i}>\n            <label htmlFor={i} className=\"player-info\">Name of player #{i + 1}: </label>\n            <input\n              className=\"input-style\"\n              id={i}\n              type=\"text\"\n              value={playerName}\n              onChange={(e) =>\n                handleChangeName(e, [...props.gameParameters.playerNames])\n              }\n              onBlur={(e) =>\n                e.target.value.length < 1 ||\n                props.gameParameters.playerNames.indexOf(e.target.value) !==\n                  props.gameParameters.playerNames.lastIndexOf(e.target.value)\n                  ? handleInvalidName(e, [...props.gameParameters.playerNames])\n                  : \"\"\n              }\n            ></input>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default NbPlayers;\n"]},"metadata":{},"sourceType":"module"}